# OS Diff automation steps
- name: Make sure Golang is installed
  failed_when: false
  become: true
  ansible.builtin.shell: |
    dnf -y install golang
    git clone https://github.com/openstack-k8s-operators/os-diff {{ od_dir }}

- name: Build os-diff
  ansible.builtin.shell: |
    cd {{ od_dir }}
    make build
  register: make_res
  become: true

- name: Set ssh command for Tripleo standalone in os-diff.cfg
  become: true
  ansible.builtin.lineinfile:
    path: "{{ od_dir }}/os-diff.cfg"
    regex: "ssh -F ssh.config standalone"
    value: "ssh_cmd=ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@{{ standalone_ip }}"

- name: Set Tripleo config path in os-diff.cfg
  become: true
  ansible.builtin.lineinfile:
    path: "{{ od_dir }}/os-diff.cfg"
    regex: "local_config_path=/tmp/"
    value: "local_config_path={{ dpa_dir }}/tripleo"

- name: Set OCP config path in os-diff.cfg
  become: true
  ansible.builtin.lineinfile:
    path: "{{ od_dir }}/os-diff.cfg"
    regex: "ocp_local_config_path=/tmp/ocp"
    value: "ocp_local_config_path={{ dpa_dir }}/ocp"

- name: Set config path in os-diff.cfg
  become: true
  ansible.builtin.lineinfile:
    path: "{{ od_dir }}/os-diff.cfg"
    regex: "local_config_dir=/tmp/"
    value: "local_config_dir={{ dpa_dir }}"

- name: Pull config from Tripleo os-diff
  ansible.builtin.shell: |
    cd {{ od_dir }}
    ./os-diff pull

# Pull nova configuration steps
- name: set shell vars pull openstack configuration ssh commands
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    pull_openstack_configuration_ssh_shell_vars: |
      CONTROLLER_SSH="{{ controller1_ssh }}"

- name: get src database service environment variables
  ansible.builtin.include_role:
    name: mariadb_copy
    tasks_from: env_vars_src.yaml

# NOTE(bogdando): env variables must be used to keep this consistent with documentation,
# where the stored values need to be compared with post-adoption ones w/o using ansible specifics
- name: test connection to the original DB
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ mariadb_copy_shell_vars_src }}
    export PULL_OPENSTACK_CONFIGURATION_DATABASES=$(podman run -i --rm --userns=keep-id -u $UID $MARIADB_IMAGE \
      mysql -rsh "$SOURCE_MARIADB_IP" -uroot "-p$SOURCE_DB_ROOT_PASSWORD" -e 'SHOW databases;')
    echo "$PULL_OPENSTACK_CONFIGURATION_DATABASES"
  register: _databases_check

- name: run mysqlcheck on the original DB to look for things that are not OK
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ mariadb_copy_shell_vars_src }}
    export PULL_OPENSTACK_CONFIGURATION_MYSQLCHECK_NOK=$(podman run -i --rm --userns=keep-id -u $UID $MARIADB_IMAGE \
      mysqlcheck --all-databases -h $SOURCE_MARIADB_IP -u root "-p$SOURCE_DB_ROOT_PASSWORD" | grep -v OK)
    echo "$PULL_OPENSTACK_CONFIGURATION_MYSQLCHECK_NOK"
  failed_when: _mysqlnok_check.stdout != ''
  register: _mysqlnok_check

- name: get source Nova services topology specific configuration
  no_log: "{{ use_no_log }}"
  block:
    - name: get Nova cells mappings from database
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ mariadb_copy_shell_vars_src }}
        export PULL_OPENSTACK_CONFIGURATION_NOVADB_MAPPED_CELLS=$(podman run -i --rm --userns=keep-id -u $UID $MARIADB_IMAGE mysql \
          -rsh "$SOURCE_MARIADB_IP" -uroot "-p$SOURCE_DB_ROOT_PASSWORD" nova_api -e \
          'select uuid,name,transport_url,database_connection,disabled from cell_mappings;')
        echo "$PULL_OPENSTACK_CONFIGURATION_NOVADB_MAPPED_CELLS"
      register: _novadb_mapped_cells_check

    - name: get the host names of the registered Nova compute services
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ mariadb_copy_shell_vars_src }}
        export PULL_OPENSTACK_CONFIGURATION_NOVA_COMPUTE_HOSTNAMES=$(podman run -i --rm --userns=keep-id -u $UID $MARIADB_IMAGE mysql \
          -rsh "$SOURCE_MARIADB_IP" -uroot "-p$SOURCE_DB_ROOT_PASSWORD" nova_api -e \
          "select host from nova.services where services.binary='nova-compute';")
        echo "$PULL_OPENSTACK_CONFIGURATION_NOVA_COMPUTE_HOSTNAMES"
      register: _nova_compute_hostnames_check

    - name: get the list of mapped Nova cells
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ pull_openstack_configuration_ssh_shell_vars }}
        export PULL_OPENSTACK_CONFIGURATION_NOVAMANAGE_CELL_MAPPINGS=$($CONTROLLER_SSH sudo podman exec -it nova_api nova-manage cell_v2 list_cells)
        echo "$PULL_OPENSTACK_CONFIGURATION_NOVAMANAGE_CELL_MAPPINGS"
      register: _nova_cell_mappings_check

- name: set cached fact for pulled openstack services configuration shell headers
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    pulled_openstack_configuration_shell_headers: |
      PULL_OPENSTACK_CONFIGURATION_DATABASES="{{ _databases_check.stdout_lines | join(' ') }}"
      PULL_OPENSTACK_CONFIGURATION_MYSQLCHECK_NOK="{{ _mysqlnok_check.stdout_lines | join(' ') }}"
      PULL_OPENSTACK_CONFIGURATION_NOVADB_MAPPED_CELLS="{{ _novadb_mapped_cells_check.stdout_lines | join(' ') }}"
      PULL_OPENSTACK_CONFIGURATION_NOVA_COMPUTE_HOSTNAMES="{{ _nova_compute_hostnames_check.stdout_lines | join(' ') }}"
      PULL_OPENSTACK_CONFIGURATION_NOVAMANAGE_CELL_MAPPINGS="{{ _nova_cell_mappings_check.stdout_lines | join(' ') }}"

- name: store exported variables for future use
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ mariadb_copy_shell_vars_src }}
    cat > ~/.source_cloud_exported_variables << EOF
    PULL_OPENSTACK_CONFIGURATION_DATABASES="$(podman run -i --rm --userns=keep-id -u $UID $MARIADB_IMAGE \
        mysql -rsh $SOURCE_MARIADB_IP -uroot -p$SOURCE_DB_ROOT_PASSWORD -e 'SHOW databases;')"
    PULL_OPENSTACK_CONFIGURATION_MYSQLCHECK_NOK="$(podman run -i --rm --userns=keep-id -u $UID $MARIADB_IMAGE \
        mysqlcheck --all-databases -h $SOURCE_MARIADB_IP -u root -p$SOURCE_DB_ROOT_PASSWORD | grep -v OK)"
    PULL_OPENSTACK_CONFIGURATION_NOVADB_MAPPED_CELLS="$(podman run -i --rm --userns=keep-id -u $UID $MARIADB_IMAGE mysql \
        -rsh $SOURCE_MARIADB_IP -uroot -p$SOURCE_DB_ROOT_PASSWORD nova_api -e \
        'select uuid,name,transport_url,database_connection,disabled from cell_mappings;')"
    PULL_OPENSTACK_CONFIGURATION_NOVA_COMPUTE_HOSTNAMES="$(podman run -i --rm --userns=keep-id -u $UID $MARIADB_IMAGE mysql \
        -rsh $SOURCE_MARIADB_IP -uroot -p$SOURCE_DB_ROOT_PASSWORD nova_api -e \
        "select host from nova.services where services.binary='nova-compute';")"
    PULL_OPENSTACK_CONFIGURATION_NOVAMANAGE_CELL_MAPPINGS="$($CONTROLLER_SSH sudo podman exec -it nova_api nova-manage cell_v2 list_cells)"
    EOF
    chmod 0600 ~/.source_cloud_exported_variables
